python:- 

porcupine = pvporcupine.create(
  access_key=access_key,
  keyword_paths=keyword_paths)

while True:
  keyword_index = porcupine.process(audio_frame())
  if keyword_index >= 0:
    // Detection callback

Porcupine Wake Word
Python API
API Reference for the Python Porcupine SDK  (PyPI ).

pvporcupine.create() 
def create(
        access_key: str,
        library_path: Optional[str] = None,
        model_path: Optional[str] = None,
        keyword_paths: Optional[List[str]] = None,
        keywords: Optional[List[str]] = None,
        sensitivities: Optional[List[float]] = None) -> Porcupine
Factory method for Porcupine Wake Word engine.

Parameters

access_key str : AccessKey obtained from Picovoice Console.
library_path Optional[str] : Absolute path to Porcupine's dynamic library. If not set it will be set to the default location.
model_path Optional[str] : Absolute path to the file containing model parameters. If not set it will be set to the default location.
keyword_paths Optional[List[str]] : Absolute paths to keyword model files. If not set it will be populated from keywords argument.
keywords Optional[List[str]] : List of built-in keywords (phrases) for detection. If keyword_paths is set then this argument will be ignored.
sensitivities Optional[List[float]] : Sensitivities for detecting keywords. Each value should be a number within [0, 1]. A higher sensitivity results in fewer misses at the cost of increasing the false alarm rate. If not set 0.5 will be used.
Returns

Porcupine: An instance of Porcupine Wake Word engine.
Throws

PorcupineError
pvporcupine.Porcupine 
class Porcupine(object)
Class for the Porcupine Wake Word engine. Porcupine can be initialized either using the module level create() function or directly using the class __init__() method. Resources should be cleaned when you are done using the delete() method.

pvporcupine.Porcupine.version 
self.version: str
The version string of the Porcupine library.

pvporcupine.Porcupine.frame_length 
self.frame_length: int
The number of audio samples per frame that Porcupine accepts.

pvporcupine.Porcupine.sample_rate 
self.sample_rate: int
The audio sample rate the Porcupine accepts.

pvporcupine.Porcupine.__init__() 
def __init__(
        self,
        access_key: str,
        library_path: str,
        model_path: str,
        keyword_paths: List[str],
        sensitivities: List[float]) -> Porcupine
__init__ method for Porcupine Wake Word engine.

Parameters

access_key str : AccessKey obtained from Picovoice Console.
library_path str : Absolute path to Porcupine's dynamic library.
model_path str : Absolute path to the file containing model parameters.
keyword_paths List[str] : Absolute paths to keyword model files.
sensitivities List[float] : Sensitivities for detecting keywords. Each value should be a number within [0, 1]. A higher sensitivity results in fewer misses at the cost of increasing the false alarm rate.
Returns

Porcupine: An instance of Porcupine Wake Word engine.
Throws

PorcupineError
pvporcupine.Porcupine.delete() 
def delete(self)
Releases resources acquired by Porcupine

pvporcupine.Porcupine.process() 
def process(self, pcm: List[int]) -> int
Processes a frame of the incoming audio stream and emits the detection result. The number of samples per frame can be attained by calling .frame_length. The incoming audio needs to have a sample rate equal to .sample_rate and be 16-bit linearly-encoded. Porcupine operates on single-channel audio.

Parameters

pcm List[int] : A frame of audio samples.
Returns

int : Index of observed keyword at the end of the current frame. Indexing is 0-based and matches the ordering of keyword models provided to the constructor. If no keyword is detected then it returns -1.
Throws

PorcupineError
pvporcupine.PorcupineError 
class PorcupineError(Exception)
Error thrown if an error occurs within Porcupine Wake Word engine.

Exceptions

class PorcupineActivationError(PorcupineError)
class PorcupineActivationLimitError(PorcupineError)
class PorcupineActivationRefusedError(PorcupineError)
class PorcupineActivationThrottledError(PorcupineError)
class PorcupineIOError(PorcupineError)
class PorcupineInvalidArgumentError(PorcupineError)
class PorcupineInvalidStateError(PorcupineError)
class PorcupineKeyError(PorcupineError)
class PorcupineMemoryError(PorcupineError)
class PorcupineRuntimeError(PorcupineError)
class PorcupineStopIterationError(PorcupineError)


flutter:- 
PorcupineManager porcupineManager = await PorcupineManager.fromKeywordPaths(
  accessKey,
  keywordPaths,
  (keywordIndex) => {
    // Detection callback
  });

await porcupineManager.start()


Picovoice Platform
Flutter API
API Reference for the Picovoice Flutter SDK  (pub.dev ) .

Picovoice 
class Picovoice { }
Class for the Picovoice platform. Picovoice can be initialized either using the High-level PicovoiceManager() Class or directly using the creator. Resources should be cleaned when you are done using the delete() function.

Use this class when using a custom audio processing pipeline. Otherwise it is recommended to use the PicovoiceManager High-Level API, which contains integrated audio recording.
Picovoice.frameLength 
int? get frameLength
Getter for the number of audio samples per frame required by Picovoice.

Picovoice.sampleRate 
int? get sampleRate
Getter for the audio sample rate required by Picovoice.

Picovoice.version 
String get version
Getter for Picovoice version string.

Picovoice.porcupineVersion 
String? get porcupineVersion
Getter for the internal Porcupine version string.

Picovoice.rhinoVersion 
String? get rhinoVersion
Getter for the internal Rhino version string.

Picovoice.contextInfo 
String? get contextInfo
Gets the source of the Rhino context in YAML format. Shows the list of intents, which expressions map to those intents, as well as slots and their possible values.

Picovoice.create() 
Static creator for initializing Picovoice.

static Future<Picovoice> create(
      String accessKey,
      String keywordPath,
      WakeWordCallback wakeWordCallback,
      String contextPath,
      InferenceCallback inferenceCallback,
      {double porcupineSensitivity = 0.5,
      double rhinoSensitivity = 0.5,
      String? porcupineModelPath,
      String? rhinoModelPath,
      double endpointDurationSec = 1.0,
      bool requireEndpoint = true}) async
Parameters

accessKey String : AccessKey obtained from Picovoice Console.
keywordPath String : Path to keyword model file (.ppn). Can be either a path that is relative to the project's assets folder or an absolute path to the file on device.
wakeWordCallback WakeWordCallback : User-defined callback invoked upon detection of the wake phrase. The callback accepts no input arguments
contextPath String : Path to the Rhino context file (.rhn). Can be either a path that is relative to the project's assets folder or an absolute path to the file on device.
inferenceCallback InferenceCallback : User-defined callback invoked upon completion of intent inference. The callback accepts a single input argument of type RhinoInference.
porcupineSensitivity double? : (Optional) Wake word detection sensitivity. It should be a number within [0, 1]. A higher sensitivity results in fewer misses at the cost of increasing the false alarm rate.
rhinoSensitivity double? : (Optional) Inference sensitivity. It should be a number within [0, 1]. A higher sensitivity value results in fewer misses at the cost of(potentially) increasing the erroneous inference rate.
porcupineModelPath String? : (Optional) Path to the file containing Porcupine's model parameters (.pv). Can be either a path that is relative to the project's assets folder or an absolute path to the file on device. If not set it will be set to the default location.
rhinoModelPath String? : (Optional) Path to the file containing Rhino's model parameters (.pv). Can be either a path that is relative to the project's assets folder or an absolute path to the file on device. If not set it will be set to the default location. If not set it will be set to the default location.
endpointDurationSec double? : (Optional) Endpoint duration in seconds. An endpoint is a chunk of silence at the end of an utterance that marks the end of spoken command. It should be a positive number within [0.5, 5]. A lower endpoint duration reduces delay and improves responsiveness. A higher endpoint duration assures Rhino doesn't return inference pre-emptively in case the user pauses before finishing the request.
requireEndpoint bool? : (Optional) If set to true, Rhino requires an endpoint (a chunk of silence) after the spoken command. If set to false, Rhino tries to detect silence, but if it cannot, it still will provide inference regardless. Set to false only if operating in an environment with overlapping speech (e.g. people talking in the background).
Returns

[Picovoice](#picovoice) an instance of the Picovoice platform.
Throws

PicovoiceException : If not initialized correctly.
Picovoice.process() 
Processes a frame of the incoming audio stream. Upon detection of wake word and completion of follow-on command inference invokes user-defined callbacks.

Future<void> process(List<int> frame) async
Parameters

frame List<int> : a frame of audio samples to be assessed by Picovoice. The required audio format is found by calling .sampleRate to get the required sample rate and .frameLength to get the required frame size. Audio must be single-channel and 16-bit linearly-encoded.
Throws

PicovoiceException : If process fails.
Picovoice.reset() 
Resets the internal state of Picovoice. It should be called before processing a new stream of audio or when Picovoice was stopped while processing a stream of audio.

Future<void> reset() async
Throws

PicovoiceException : If process fails.
Picovoice.delete() 
Release the resources acquired by Picovoice (via Porcupine and Rhino engines).

Future<void> delete() async
PicovoiceManager 
Manager for creating an instance of Picovoice. A High-level Flutter binding for Picovoice platform that handles recording audio from microphone, processes it in real-time.

class PicovoiceManager { }
PicovoiceManager.contextInfo 
String? get contextInfo
Gets the source of the Rhino context in YAML format. Shows the list of intents, which expressions map to those intents, as well as slots and their possible values. Can only be accessed after a call to start()

PicovoiceManager.create() 
Static creator for initializing Picovoice.

static Future<PicovoiceManager> create(
      String accessKey,
      String keywordPath,
      WakeWordCallback wakeWordCallback,
      String contextPath,
      InferenceCallback inferenceCallback,
      {double porcupineSensitivity = 0.5,
      double rhinoSensitivity = 0.5,
      String? porcupineModelPath,
      String? rhinoModelPath,
      double endpointDurationSec = 1.0,
      bool requireEndpoint = true,
      ProcessErrorCallback? processErrorCallback}) async
Parameters

accessKey String : AccessKey obtained from Picovoice Console.
keywordPath String : Path to keyword model file (.ppn). Can be either a path that is relative to the project's assets folder or an absolute path to the file on device.
wakeWordCallback WakeWordCallback : User-defined callback invoked upon detection of the wake phrase. The callback accepts no input arguments
contextPath String : Path to the Rhino context file (.rhn). Can be either a path that is relative to the project's assets folder or an absolute path to the file on device.
inferenceCallback InferenceCallback : User-defined callback invoked upon completion of intent inference. The callback accepts a single input argument of type RhinoInference.
porcupineSensitivity double? : (Optional) Wake word detection sensitivity. It should be a number within [0, 1]. A higher sensitivity results in fewer misses at the cost of increasing the false alarm rate.
rhinoSensitivity double? : (Optional) Inference sensitivity. It should be a number within [0, 1]. A higher sensitivity value results in fewer misses at the cost of(potentially) increasing the erroneous inference rate.
porcupineModelPath String? : (Optional) Path to the file containing Porcupine's model parameters (.pv). Can be either a path that is relative to the project's assets folder or an absolute path to the file on device. If not set it will be set to the default location.
rhinoModelPath String? : (Optional) Path to the file containing Rhino's model parameters (.pv). Can be either a path that is relative to the project's assets folder or an absolute path to the file on device. If not set it will be set to the default location. If not set it will be set to the default location. set it will be set to the default location (.pv).
endpointDurationSec double? : (Optional) Endpoint duration in seconds. An endpoint is a chunk of silence at the end of an utterance that marks the end of spoken command. It should be a positive number within [0.5, 5]. A lower endpoint duration reduces delay and improves responsiveness. A higher endpoint duration assures Rhino doesn't return inference pre-emptively in case the user pauses before finishing the request.
requireEndpoint bool? : (Optional) If set to true, Rhino requires an endpoint (a chunk of silence) after the spoken command. If set to false, Rhino tries to detect silence, but if it cannot, it still will provide inference regardless. Set to false only if operating in an environment with overlapping speech (e.g. people talking in the background).
processErrorCallback ProcessErrorCallback : Reports errors that are encountered while the engine is processing audio.
Returns

PicovoiceManager an instance of PicovoiceManager.
Throws

PicovoiceException : If not initialized correctly.
PicovoiceManager.start() 
Opens audio input stream and sends audio frames to Picovoice.

Future<void> start() async
Throws

PicovoiceException : If an error was encountered while starting audio processing.
PicovoiceManager.stop() 
Closes audio stream and stops Picovoice processing.

Future<void> stop() async
Throws

PicovoiceException : If an error was encountered while stopping audio processing.
PicovoiceManager.reset() 
Resets the internal state of PicovoiceManager. It can be called to return to the wake word detection state before an inference has completed.

Future<void> reset() async
Throws

PicovoiceException : If an error was encountered while resetting.
PicovoiceManager.delete() 
Releases native resources that were allocated to PicovoiceManager.

Future<void> delete() async
ProcessErrorCallback 
Type for the error callback that occurs while processing audio.

typedef ProcessErrorCallback = Function(PicovoiceException error);
Parameters

error PicovoiceException
PicovoiceException 
class PicovoiceException implements Exception { }
Exception thrown if an error occurs within Picovoice:

Copy
class PicovoiceMemoryException extends PicovoiceException { }
class PicovoiceIOException extends PicovoiceException { }
class PicovoiceInvalidArgumentException extends PicovoiceException { }
class PicovoiceStopIterationException extends PicovoiceException { }
class PicovoiceKeyException extends PicovoiceException { }
class PicovoiceInvalidStateException extends PicovoiceException { }
class PicovoiceRuntimeException extends PicovoiceException { }
class PicovoiceActivationException extends PicovoiceException { }
class PicovoiceActivationLimitException extends PicovoiceException { }
class PicovoiceActivationThrottledException extends PicovoiceException { }
class PicovoiceActivationRefusedException extends PicovoiceException { }